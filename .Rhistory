install.packages("rpart.plot")
library(ggplot2)
ds_salaries <- read.csv("Predicting-Data-Science-Job-Salaries/ds_salaries.csv")
library(ggplot2)
ds_salaries <- read.csv("Predicting-Data-Science-Job-Salaries/ds_salaries.csv")
library(readr)
ds_salaries <- read_csv("ds_salaries.csv")
View(ds_salaries)
library(ggplot2)
ds_salaries <- read.csv("Predicting-Data-Science-Job-Salaries/ds_salaries.csv")
library(ggplot2)
ds_salaries <- read.csv("Predicting-Data-Science-Job-Salaries/ds_salaries.csv")
library(ggplot2)
ds_salaries <- read.csv("Predicting-Data-Science-Job-Salaries/ds_salaries.csv")
install.packages("rpart.plot")
install.packages("ggplot2")
install.packages("e1071")
library(caret)
confusion <- confusionMatrix(predictions, test$default.payment.next.month)
library(ggplot2)
cc <- read.csv("UCI_Credit_Card.csv")
cc$SEX <- factor(cc$SEX,levels=c(1,2), labels=c("Male", "Female"))
cc$EDUCATION <- factor(cc$EDUCATION,levels=c(1,2,3,4,5,6), labels=c("graduate school","university","high school", "others", "unknown", "unknown"))
cc$MARRIAGE <- factor(cc$MARRIAGE,levels=c(1,2,3), labels=c("married", "single", "others"))
cc$PAY_0 <- factor(cc$PAY_0,levels=c(-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9), labels=c("-2", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"))
cc$PAY_2 <- factor(cc$PAY_2,levels=c(-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9), labels=c("-2", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"))
cc$PAY_3 <- factor(cc$PAY_3,levels=c(-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9), labels=c("-2", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"))
cc$PAY_4 <- factor(cc$PAY_4,levels=c(-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9), labels=c("-2", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"))
cc$PAY_5 <- factor(cc$PAY_5,levels=c(-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9), labels=c("-2", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"))
cc$PAY_6 <- factor(cc$PAY_6,levels=c(-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9), labels=c("-2", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"))
cc$default.payment.next.month <- factor(cc$default.payment.next.month,levels=c(0,1), labels=c("No","Yes"))
class(cc$SEX)
class(cc$EDUCATION)
class(cc$MARRIAGE)
class(cc$PAY_0)
class(cc$default.payment.next.month)
ccnn <- subset(cc, BILL_AMT1>=0 & BILL_AMT2 >=0 & BILL_AMT3 >=0 & BILL_AMT4 >=0 & BILL_AMT5 >=0 & BILL_AMT6 >=0 & PAY_AMT1>=0 & PAY_AMT2>=0 & PAY_AMT3>=0 & PAY_AMT4>=0 & PAY_AMT5>=0 & PAY_AMT6>=0)
nrow(ccnn)
View(ccnn)
set.seed(123)  # For reproducibility
train_indices <- sample(1:nrow(ccnn), 0.9 * nrow(ccnn))  # 90% for training
train <- ccnn[train_indices, ]
test <- ccnn[-train_indices, ]
library(e1071)
nb <- naiveBayes(default.payment.next.month ~ LIMIT_BAL + BILL_AMT1 + PAY_AMT1, data = train)
predictions <- predict(nb, newdata = test)
library(caret)
confusion <- confusionMatrix(predictions, test$default.payment.next.month)
TP <- confusion$table[2, 2]  # True positives
TN <- confusion$table[1, 1]  # True negatives
FP <- confusion$table[1, 2]  # False positives
FN <- confusion$table[2, 1]  # False negatives
accuracy <- confusion$overall["Accuracy"]
precision <- confusion$byClass["Pos Pred Value"]
recall <- confusion$byClass["Sensitivity"]
F_measure <- confusion$byClass["F1"]
kappa <- confusion$overall["Kappa"]
# Print the confusion table
print(confusion$table)
# Print the performance metrics
metrics_table <- data.frame(TP, TN, FP, FN, accuracy, precision, recall, F_measure, kappa)
metrics_table
# New data frame
ccnn_update <- data.frame(ccnn)
ccnn_update['Credit_util1'] = ccnn_update['BILL_AMT1'] / ccnn_update['LIMIT_BAL']
ccnn_update['Credit_util2'] = ccnn_update['BILL_AMT2'] / ccnn_update['LIMIT_BAL']
ccnn_update['Credit_util3'] = ccnn_update['BILL_AMT3'] / ccnn_update['LIMIT_BAL']
ccnn_update['Credit_util4'] = ccnn_update['BILL_AMT4'] / ccnn_update['LIMIT_BAL']
ccnn_update['Credit_util5'] = ccnn_update['BILL_AMT5'] / ccnn_update['LIMIT_BAL']
ccnn_update['Credit_util6'] = ccnn_update['BILL_AMT6'] / ccnn_update['LIMIT_BAL']
ccnn_update['Payment_Ratio1'] = ccnn_update['PAY_AMT1'] / ccnn_update['BILL_AMT1']
ccnn_update['Payment_Ratio2'] = ccnn_update['PAY_AMT2'] / ccnn_update['BILL_AMT2']
ccnn_update['Payment_Ratio3'] = ccnn_update['PAY_AMT3'] / ccnn_update['BILL_AMT3']
ccnn_update['Payment_Ratio4'] = ccnn_update['PAY_AMT4'] / ccnn_update['BILL_AMT4']
ccnn_update['Payment_Ratio5'] = ccnn_update['PAY_AMT5'] / ccnn_update['BILL_AMT5']
ccnn_update['Payment_Ratio6'] = ccnn_update['PAY_AMT6'] / ccnn_update['BILL_AMT6']
ccnn_update$Payment_Ratio1 <- ifelse(is.nan(ccnn_update$Payment_Ratio1) | is.infinite(ccnn_update$Payment_Ratio1), 0, ccnn_update$Payment_Ratio1)
ccnn_update$Payment_Ratio2 <- ifelse(is.nan(ccnn_update$Payment_Ratio2) | is.infinite(ccnn_update$Payment_Ratio2), 0, ccnn_update$Payment_Ratio2)
ccnn_update$Payment_Ratio3 <- ifelse(is.nan(ccnn_update$Payment_Ratio3) | is.infinite(ccnn_update$Payment_Ratio3), 0, ccnn_update$Payment_Ratio3)
ccnn_update$Payment_Ratio4 <- ifelse(is.nan(ccnn_update$Payment_Ratio4) | is.infinite(ccnn_update$Payment_Ratio4), 0, ccnn_update$Payment_Ratio4)
ccnn_update$Payment_Ratio5 <- ifelse(is.nan(ccnn_update$Payment_Ratio5) | is.infinite(ccnn_update$Payment_Ratio5), 0, ccnn_update$Payment_Ratio5)
ccnn_update$Payment_Ratio6 <- ifelse(is.nan(ccnn_update$Payment_Ratio6) | is.infinite(ccnn_update$Payment_Ratio6), 0, ccnn_update$Payment_Ratio6)
View(ccnn_update)
set.seed(123)  # For reproducibility
train_indices_update <- sample(1:nrow(ccnn_update), 0.9 * nrow(ccnn_update))  # 90% for training
train_update <- ccnn_update[train_indices_update, ]
test_update <- ccnn_update[-train_indices_update, ]
#nb_update <- naiveBayes(default.payment.next.month ~ LIMIT_BAL + BILL_AMT1 + PAY_AMT1 + Payment_Ratio1  , data = train_update), Credit_util1
nb_update <- naiveBayes(default.payment.next.month ~ LIMIT_BAL + BILL_AMT1 + PAY_AMT1 + Credit_util1, data = train_update)
predictions_update <- predict(nb_update, newdata = test_update)
confusion_update <- confusionMatrix(predictions_update, test_update$default.payment.next.month)
TP <- confusion_update$table[2, 2]  # True positives
TN <- confusion_update$table[1, 1]  # True negatives
FP <- confusion_update$table[1, 2]  # False positives
FN <- confusion_update$table[2, 1]  # False negatives
accuracy <- confusion_update$overall["Accuracy"]
precision <- confusion_update$byClass["Pos Pred Value"]
recall <- confusion_update$byClass["Sensitivity"]
F_measure <- confusion_update$byClass["F1"]
kappa <- confusion_update$overall["Kappa"]
# Print the confusion table
print(confusion_update$table)
# Print the performance metrics
metrics_table <- data.frame(TP, TN, FP, FN, accuracy, precision, recall, F_measure, kappa)
metrics_table
#ccnn_log<- data.frame(ccnn_update)
ccnn_update$LIMIT_BALl <- log(ccnn_update$LIMIT_BAL)
ccnn_update$BILL_AMT1l <- log(ccnn_update$BILL_AMT1)
ccnn_update$BILL_AMT2l <- log(ccnn_update$BILL_AMT2)
ccnn_update$BILL_AMT3l <- log(ccnn_update$BILL_AMT3)
ccnn_update$BILL_AMT4l <- log(ccnn_update$BILL_AMT4)
ccnn_update$BILL_AMT5l <- log(ccnn_update$BILL_AMT5)
ccnn_update$BILL_AMT6l <- log(ccnn_update$BILL_AMT6)
ccnn_update$PAY_AMT1l <- log(ccnn_update$PAY_AMT1)
ccnn_update$PAY_AMT2l <- log(ccnn_update$PAY_AMT2)
ccnn_update$PAY_AMT3l <- log(ccnn_update$PAY_AMT3)
ccnn_update$PAY_AMT4l <- log(ccnn_update$PAY_AMT4)
ccnn_update$PAY_AMT5l <- log(ccnn_update$PAY_AMT5)
ccnn_update$PAY_AMT6l <- log(ccnn_update$PAY_AMT6)
ccnn_update$Credit_util1l <- log(ccnn_update$Credit_util1)
ccnn_update$Credit_util2l <- log(ccnn_update$Credit_util2)
ccnn_update$Credit_util3l <- log(ccnn_update$Credit_util3)
ccnn_update$Credit_util4l <- log(ccnn_update$Credit_util4)
ccnn_update$Credit_util5l <- log(ccnn_update$Credit_util5)
ccnn_update$Credit_util6l <- log(ccnn_update$Credit_util6)
#Histrograms before transformation
hist(ccnn_update$LIMIT_BAL)
hist(ccnn_update$BILL_AMT1)
hist(ccnn_update$PAY_AMT1)
hist(ccnn_update$Credit_util1)
# histograms after
hist(ccnn_update$LIMIT_BALl)
hist(ccnn_update$BILL_AMT1l)
hist(ccnn_update$PAY_AMT1l)
hist(ccnn_update$Credit_util1l)
ccnn_update$LIMIT_BAL <- NULL
ccnn_update$BILL_AMT1 <- NULL
ccnn_update$BILL_AMT2 <- NULL
ccnn_update$BILL_AMT3 <- NULL
ccnn_update$BILL_AMT4 <- NULL
ccnn_update$BILL_AMT5 <- NULL
ccnn_update$BILL_AMT6 <- NULL
ccnn_update$PAY_AMT1 <- NULL
ccnn_update$PAY_AMT2 <- NULL
ccnn_update$PAY_AMT3 <- NULL
ccnn_update$PAY_AMT4 <- NULL
ccnn_update$PAY_AMT5 <- NULL
ccnn_update$PAY_AMT6 <- NULL
ccnn_update$Credit_util1 <- NULL
ccnn_update$Credit_util2 <- NULL
ccnn_update$Credit_util3 <- NULL
ccnn_update$Credit_util4 <- NULL
ccnn_update$Credit_util5 <- NULL
ccnn_update$Credit_util6 <- NULL
set.seed(123)  # For reproducibility
train_indices <- sample(1:nrow(ccnn_update), 0.9 * nrow(ccnn_update))  # 90% for training
train_log <- ccnn_update[train_indices, ]
test_log <- ccnn_update[-train_indices, ]
nb_log <- naiveBayes(default.payment.next.month ~ LIMIT_BALl + BILL_AMT1l + PAY_AMT1l + Credit_util1l, data = train_log)
predictions_log <- predict(nb_log, newdata = test_log)
confusion_log <- confusionMatrix(predictions_log, test_log$default.payment.next.month)
confusion_log <- confusionMatrix(predictions_log, test_log$default.payment.next.month)
length(predictions_log)
length(test_log$default.payment.next.month)
View(ccnn_update)
# Check if test data is empty
if (nrow(test_log) == 0) {
print("Test data is empty.")
} else {
print("Test data is not empty.")
}
# Check if necessary columns exist in test data
required_columns <- c("LIMIT_BALl", "BILL_AMT1l", "PAY_AMT1l", "Credit_util1l")
missing_columns <- setdiff(required_columns, colnames(test_log))
if (length(missing_columns) > 0) {
print("Test data is missing the following columns:")
print(missing_columns)
} else {
print("Test data contains all the necessary columns.")
}
if (!is.null(nb_log)) {
print("Model has been trained successfully.")
} else {
print("Model is null or not trained.")
}
if ("fitted.values" %in% names(nb_log) && "levels" %in% names(nb_log) && "apriori" %in% names(nb_log)) {
print("Model is valid.")
} else {
print("Model is missing necessary components.")
}
if ("fitted.values" %in% names(nb_log)) {
print("fitted.values is present.")
} else {
print("fitted.values is missing.")
}
if ("levels" %in% names(nb_log)) {
print("levels is present.")
} else {
print("levels is missing.")
}
if ("apriori" %in% names(nb_log)) {
print("apriori is present.")
} else {
print("apriori is missing.")
}
library(ggplot2)
cc <- read.csv("UCI_Credit_Card.csv")
cc$SEX <- factor(cc$SEX,levels=c(1,2), labels=c("Male", "Female"))
cc$EDUCATION <- factor(cc$EDUCATION,levels=c(1,2,3,4,5,6), labels=c("graduate school","university","high school", "others", "unknown", "unknown"))
cc$MARRIAGE <- factor(cc$MARRIAGE,levels=c(1,2,3), labels=c("married", "single", "others"))
cc$PAY_0 <- factor(cc$PAY_0,levels=c(-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9), labels=c("-2", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"))
cc$PAY_2 <- factor(cc$PAY_2,levels=c(-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9), labels=c("-2", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"))
cc$PAY_3 <- factor(cc$PAY_3,levels=c(-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9), labels=c("-2", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"))
cc$PAY_4 <- factor(cc$PAY_4,levels=c(-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9), labels=c("-2", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"))
cc$PAY_5 <- factor(cc$PAY_5,levels=c(-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9), labels=c("-2", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"))
cc$PAY_6 <- factor(cc$PAY_6,levels=c(-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9), labels=c("-2", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"))
cc$default.payment.next.month <- factor(cc$default.payment.next.month,levels=c(0,1), labels=c("No","Yes"))
class(cc$SEX)
class(cc$EDUCATION)
class(cc$MARRIAGE)
class(cc$PAY_0)
class(cc$default.payment.next.month)
ccnn <- subset(cc, BILL_AMT1>=0 & BILL_AMT2 >=0 & BILL_AMT3 >=0 & BILL_AMT4 >=0 & BILL_AMT5 >=0 & BILL_AMT6 >=0 & PAY_AMT1>=0 & PAY_AMT2>=0 & PAY_AMT3>=0 & PAY_AMT4>=0 & PAY_AMT5>=0 & PAY_AMT6>=0)
nrow(ccnn)
View(ccnn)
set.seed(123)  # For reproducibility
train_indices <- sample(1:nrow(ccnn), 0.9 * nrow(ccnn))  # 90% for training
train <- ccnn[train_indices, ]
test <- ccnn[-train_indices, ]
library(e1071)
nb <- naiveBayes(default.payment.next.month ~ LIMIT_BAL + BILL_AMT1 + PAY_AMT1, data = train)
predictions <- predict(nb, newdata = test)
library(caret)
confusion <- confusionMatrix(predictions, test$default.payment.next.month)
TP <- confusion$table[2, 2]  # True positives
TN <- confusion$table[1, 1]  # True negatives
FP <- confusion$table[1, 2]  # False positives
FN <- confusion$table[2, 1]  # False negatives
accuracy <- confusion$overall["Accuracy"]
precision <- confusion$byClass["Pos Pred Value"]
recall <- confusion$byClass["Sensitivity"]
F_measure <- confusion$byClass["F1"]
kappa <- confusion$overall["Kappa"]
# Print the confusion table
print(confusion$table)
# Print the performance metrics
metrics_table <- data.frame(TP, TN, FP, FN, accuracy, precision, recall, F_measure, kappa)
metrics_table
# New data frame
ccnn_update <- data.frame(ccnn)
ccnn_update['Credit_util1'] = ccnn_update['BILL_AMT1'] / ccnn_update['LIMIT_BAL']
ccnn_update['Credit_util2'] = ccnn_update['BILL_AMT2'] / ccnn_update['LIMIT_BAL']
ccnn_update['Credit_util3'] = ccnn_update['BILL_AMT3'] / ccnn_update['LIMIT_BAL']
ccnn_update['Credit_util4'] = ccnn_update['BILL_AMT4'] / ccnn_update['LIMIT_BAL']
ccnn_update['Credit_util5'] = ccnn_update['BILL_AMT5'] / ccnn_update['LIMIT_BAL']
ccnn_update['Credit_util6'] = ccnn_update['BILL_AMT6'] / ccnn_update['LIMIT_BAL']
ccnn_update['Payment_Ratio1'] = ccnn_update['PAY_AMT1'] / ccnn_update['BILL_AMT1']
ccnn_update['Payment_Ratio2'] = ccnn_update['PAY_AMT2'] / ccnn_update['BILL_AMT2']
ccnn_update['Payment_Ratio3'] = ccnn_update['PAY_AMT3'] / ccnn_update['BILL_AMT3']
ccnn_update['Payment_Ratio4'] = ccnn_update['PAY_AMT4'] / ccnn_update['BILL_AMT4']
ccnn_update['Payment_Ratio5'] = ccnn_update['PAY_AMT5'] / ccnn_update['BILL_AMT5']
ccnn_update['Payment_Ratio6'] = ccnn_update['PAY_AMT6'] / ccnn_update['BILL_AMT6']
ccnn_update$Payment_Ratio1 <- ifelse(is.nan(ccnn_update$Payment_Ratio1) | is.infinite(ccnn_update$Payment_Ratio1), 0, ccnn_update$Payment_Ratio1)
ccnn_update$Payment_Ratio2 <- ifelse(is.nan(ccnn_update$Payment_Ratio2) | is.infinite(ccnn_update$Payment_Ratio2), 0, ccnn_update$Payment_Ratio2)
ccnn_update$Payment_Ratio3 <- ifelse(is.nan(ccnn_update$Payment_Ratio3) | is.infinite(ccnn_update$Payment_Ratio3), 0, ccnn_update$Payment_Ratio3)
ccnn_update$Payment_Ratio4 <- ifelse(is.nan(ccnn_update$Payment_Ratio4) | is.infinite(ccnn_update$Payment_Ratio4), 0, ccnn_update$Payment_Ratio4)
ccnn_update$Payment_Ratio5 <- ifelse(is.nan(ccnn_update$Payment_Ratio5) | is.infinite(ccnn_update$Payment_Ratio5), 0, ccnn_update$Payment_Ratio5)
ccnn_update$Payment_Ratio6 <- ifelse(is.nan(ccnn_update$Payment_Ratio6) | is.infinite(ccnn_update$Payment_Ratio6), 0, ccnn_update$Payment_Ratio6)
View(ccnn_update)
set.seed(123)  # For reproducibility
train_indices_update <- sample(1:nrow(ccnn_update), 0.9 * nrow(ccnn_update))  # 90% for training
train_update <- ccnn_update[train_indices_update, ]
test_update <- ccnn_update[-train_indices_update, ]
#nb_update <- naiveBayes(default.payment.next.month ~ LIMIT_BAL + BILL_AMT1 + PAY_AMT1 + Payment_Ratio1  , data = train_update), Credit_util1
nb_update <- naiveBayes(default.payment.next.month ~ LIMIT_BAL + BILL_AMT1 + PAY_AMT1 + Credit_util1, data = train_update)
predictions_update <- predict(nb_update, newdata = test_update)
confusion_update <- confusionMatrix(predictions_update, test_update$default.payment.next.month)
TP <- confusion_update$table[2, 2]  # True positives
TN <- confusion_update$table[1, 1]  # True negatives
FP <- confusion_update$table[1, 2]  # False positives
FN <- confusion_update$table[2, 1]  # False negatives
accuracy <- confusion_update$overall["Accuracy"]
precision <- confusion_update$byClass["Pos Pred Value"]
recall <- confusion_update$byClass["Sensitivity"]
F_measure <- confusion_update$byClass["F1"]
kappa <- confusion_update$overall["Kappa"]
# Print the confusion table
print(confusion_update$table)
# Print the performance metrics
metrics_table <- data.frame(TP, TN, FP, FN, accuracy, precision, recall, F_measure, kappa)
metrics_table
# remove 0 values to avoid -inf
ccnn_update <- subset(ccnn_update, rowSums(ccnn_update == 0 | ccnn_update == 0.000000000) == 0)
ccnn_update
ccnn_update$LIMIT_BALl <- log(ccnn_update$LIMIT_BAL)
ccnn_update$BILL_AMT1l <- log(ccnn_update$BILL_AMT1)
ccnn_update$BILL_AMT2l <- log(ccnn_update$BILL_AMT2)
ccnn_update$BILL_AMT3l <- log(ccnn_update$BILL_AMT3)
ccnn_update$BILL_AMT4l <- log(ccnn_update$BILL_AMT4)
ccnn_update$BILL_AMT5l <- log(ccnn_update$BILL_AMT5)
ccnn_update$BILL_AMT6l <- log(ccnn_update$BILL_AMT6)
ccnn_update$PAY_AMT1l <- log(ccnn_update$PAY_AMT1)
ccnn_update$PAY_AMT2l <- log(ccnn_update$PAY_AMT2)
ccnn_update$PAY_AMT3l <- log(ccnn_update$PAY_AMT3)
ccnn_update$PAY_AMT4l <- log(ccnn_update$PAY_AMT4)
ccnn_update$PAY_AMT5l <- log(ccnn_update$PAY_AMT5)
ccnn_update$PAY_AMT6l <- log(ccnn_update$PAY_AMT6)
ccnn_update$Credit_util1l <- log(ccnn_update$Credit_util1)
ccnn_update$Credit_util2l <- log(ccnn_update$Credit_util2)
ccnn_update$Credit_util3l <- log(ccnn_update$Credit_util3)
ccnn_update$Credit_util4l <- log(ccnn_update$Credit_util4)
ccnn_update$Credit_util5l <- log(ccnn_update$Credit_util5)
ccnn_update$Credit_util6l <- log(ccnn_update$Credit_util6)
#Histrograms before transformation
hist(ccnn_update$LIMIT_BAL)
hist(ccnn_update$BILL_AMT1)
hist(ccnn_update$PAY_AMT1)
hist(ccnn_update$Credit_util1)
# histograms after
hist(ccnn_update$LIMIT_BALl)
hist(ccnn_update$BILL_AMT1l)
hist(ccnn_update$PAY_AMT1l)
hist(ccnn_update$Credit_util1l)
ccnn_update$LIMIT_BAL <- NULL
ccnn_update$BILL_AMT1 <- NULL
ccnn_update$BILL_AMT2 <- NULL
ccnn_update$BILL_AMT3 <- NULL
ccnn_update$BILL_AMT4 <- NULL
ccnn_update$BILL_AMT5 <- NULL
ccnn_update$BILL_AMT6 <- NULL
ccnn_update$PAY_AMT1 <- NULL
ccnn_update$PAY_AMT2 <- NULL
ccnn_update$PAY_AMT3 <- NULL
ccnn_update$PAY_AMT4 <- NULL
ccnn_update$PAY_AMT5 <- NULL
ccnn_update$PAY_AMT6 <- NULL
ccnn_update$Credit_util1 <- NULL
ccnn_update$Credit_util2 <- NULL
ccnn_update$Credit_util3 <- NULL
ccnn_update$Credit_util4 <- NULL
ccnn_update$Credit_util5 <- NULL
ccnn_update$Credit_util6 <- NULL
set.seed(123)  # For reproducibility
train_indices <- sample(1:nrow(ccnn_update), 0.9 * nrow(ccnn_update))  # 90% for training
train_log <- ccnn_update[train_indices, ]
test_log <- ccnn_update[-train_indices, ]
nb_log <- naiveBayes(default.payment.next.month ~ LIMIT_BALl + BILL_AMT1l + PAY_AMT1l + Credit_util1l, data = train_log)
predictions_log <- predict(nb_log, newdata = test_log)
confusion_log <- confusionMatrix(predictions_log, test_log$default.payment.next.month)
TP <- confusion_log$table[2, 2]  # True positives
TN <- confusion_log$table[1, 1]  # True negatives
FP <- confusion_log$table[1, 2]  # False positives
FN <- confusion_log$table[2, 1]  # False negatives
accuracy <- confusion_log$overall["Accuracy"]
precision <- confusion_log$byClass["Pos Pred Value"]
recall <- confusion_log$byClass["Sensitivity"]
F_measure <- confusion_log$byClass["F1"]
kappa <- confusion_log$overall["Kappa"]
# Print the confusion table
print(confusion_log$table)
metrics_table <- data.frame(TP, TN, FP, FN, accuracy, precision, recall, F_measure, kappa)
metrics_table
library(rpart)
# Train a decision tree classifier
decision_tree <- rpart(default.payment.next.month ~ LIMIT_BALl + BILL_AMT1l + PAY_AMT1l + Credit_util1l, data = train_log, method = "class")
predictions_dt <- predict(decision_tree, newdata = test_log, type = "class")
confusion_dt <- confusionMatrix(predictions_dt, test_log$default.payment.next.month)
TP <- confusion_dt$table[2, 2]  # True positives
TN <- confusion_dt$table[1, 1]  # True negatives
FP <- confusion_dt$table[1, 2]  # False positives
FN <- confusion_dt$table[2, 1]  # False negatives
accuracy <- confusion_dt$overall["Accuracy"]
precision <- confusion_dt$byClass["Pos Pred Value"]
recall <- confusion_dt$byClass["Sensitivity"]
F_measure <- confusion_dt$byClass["F1"]
kappa <- confusion_dt$overall["Kappa"]
# Print the confusion table
print(confusion_dt$table)
metrics_table <- data.frame(TP, TN, FP, FN, accuracy, precision, recall, F_measure, kappa)
metrics_table
